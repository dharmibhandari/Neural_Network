from sklearn.neural_network import MLPClassifier
from sklearn import datasets

from sklearn.neural_network import MLPClassifier


from sklearn import datasets

iris = datasets.load_iris()

inputs = iris.data
inputs

iris.feature_names

outputs = iris.target
(outputs)

iris.target_names

inputs.shape

outputs.shape


# train and test datasets

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(inputs, outputs, test_size =0.2)

x_train.shape

y_train.shape

x_test.shape

y_test.shape

x_train[0:5]

x_test[0:5]

y_train[0:5]

y_test[0:5]

        

# Neural network(training)

network = MLPClassifier()
network.fit(x_train,y_train)

network = MLPClassifier(max_iter=2000, verbose=True, tol=0.0000100, activation="logistic",solver=
                       'adam', learning_rate="constant",learning_rate_init=0.001,batch_size=32,hidden_layer_sizes=(4,5),
                       )
network.fit(x_train,y_train)

network.classes_

network.coefs_ #weights used whike training the model 

network.intercepts_ 

network.n_layers_

network.n_outputs_

network.out_activation_ #which activation function is used 

# neural network(evaluation)

x_test.shape

predictions = network.predict(x_test)
predictions

y_test

from sklearn.metrics import accuracy_score, confusion_matrix
accuracy_score(y_test,predictions)

import seaborn as sns



cn = confusion_matrix(y_test, predictions)
cn

sns.heatmap(cn,annot=True)

!pip install yellowbrick --upgrade

!pip install yellowbrick

# Neural network(classification)

    from yellowbrick.classifier import ConfusionMatrix

from yellowbrick.classifier import confusionMatrix




from sklearn.metrics import confusion_matrix

confusion_matrix= ConfusionMatrix(network, classes=iris.target_names)
